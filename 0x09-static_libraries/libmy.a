!<arch>
0-isupper.c/    0           0     0     644     203       `
#include "main.h"
/**
 * _isupper-evaluate if letter is uppercase
 *@c: print int
 * Return: 0 if successful
 */

int _isupper(int c)
{
if (c >= 'A' && c <= 'Z')
{
return (1);
}

else
{
return (0);
}

}

0-memset.c/     0           0     0     644     311       `
#include "main.h"

/**
 * _memset - fills string with constant char b upto n bytes
 * @s: input pointer to string
 * @b: constant char
 * @n: number of bytes
 * Return: pointer to s string
 */

char *_memset(char *s, char b, unsigned int n)
{
unsigned int i = 0;

while (i < n)
{
s[i] = b;
i++;
}
return (s);
}

0-strcat.c/     0           0     0     644     302       `
#include "main.h"

/**
 *_strcat-concatenate 2 strings
 *@dest: first string.
 *@src: second string.
 *Return: string.
 */

char *_strcat(char *dest, char *src)
{
int i = 0, j = 0;

while (dest[i] != '\0')
i++;

while (src[j] != '\0')
{
dest[i] = src[j];
i++;
j++;
}

dest[i] = '\0';

return (dest);
}
100-atoi.c/     0           0     0     644     560       `
#include "main.h"

/**
 * _atoi - converts a string to an integer.
 * @s: params
 * Return: something
 */
int _atoi(char *s)
{
	unsigned int count = 0, size = 0, j = 0, k = 1, m = 1, i;

	while (*(s + count) != '\0')
	{
		if (size > 0 && (*(s + count) < '0' || *(s + count) > '9'))
			break;

		if (*(s + count) == '-')
			k *= -1;

		if ((*(s + count) >= '0') && (*(s + count) <= '9'))
		{
			if (size > 0)
				m *= 10;
			size++;
		}
		count++;
	}

	for (i = count - size; i < count; i++)
	{
		j = j + ((*(s + i) - 48) * m);
		m /= 10;
	}
	return (j * k);
}
1-isdigit.c/    0           0     0     644     194       `
#include "main.h"

/**
 * _isdigit-checks for a digit (0 through 9)
 * @c: int to be checked
 * Return: 1 if c is a digit, 0 otherwise
 */
int _isdigit(int c)
{
return (c >= '0' && c <= '9');
}
1-memcpy.c/     0           0     0     644     339       `
#include "main.h"

/**
 * _memcpy - input
 * @dest: input pointer to string destination
 * @src: input pointer to source string
 * @n: number of bytes
 * Return: pointer to destination string
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
unsigned int i = 0;

while (i < n)
{
*(dest + i) = *(src + i);
i++;
}
return (dest);
}

1-strncat.c/    0           0     0     644     380       `
#include "main.h"

/**
 *_strncat - concatinate 2 strings.
 *@dest: first string.
 *@src: second string.
 *@n: the number of bytes to use from src.
 *Return: string.
 */

char *_strncat(char *dest, char *src, int n)
{
int i = 0, k = 0;

while (dest[i] != '\0')
i++;

while (src[k] != '\0' && n > k)
{
dest[i] = src[k];
k++;
i++;
}
if (n > 0)
{
dest[i] = '\0';
}

return (dest);
}
2-strchr.c/     0           0     0     644     313       `
#include "main.h"

/**
 * _strchr - locates a character in a string
 * @s: string input
 * @c: character to find
 * Return: pointer to first occurence of c character
 */

char *_strchr(char *s, char c)
{
unsigned int i;

for (i = 0; s[i] != '\0'; i++)
if (s[i] == c)
break;
return (s[i] == c ? (s + i) : '\0');
}

2-strlen.c/     0           0     0     644     231       `
#include "main.h"

/**
 * _strlen - returns the length of a string.
 * @s: input string.
 * Return: length of a string.
 */
int _strlen(char *s)
{
	int count = 0;

	while (*(s + count) != '\0')
	{
		count++;
	}

	return (count);
}

2-strncpy.c/    0           0     0     644     374       `
#include "main.h"

/**
 *_strncpy - copy src into dest.
 *@dest: first string.
 *@src: second string.
 *@n: the number of bytes to use from src.
 *Return: string.
*/

char *_strncpy(char *dest, char *src, int n)
{
int i = 0, k = 0;

while (n > k)
{
if (src[k] == '\0')
{
for (; k < n; k++)
{
dest[i] = '\0';
i++;
}
}
else
{
dest[i] = src[k];
k++;
i++;
}
}

return (dest);
}
3-islower.c/    0           0     0     644     174       `
#include "main.h"

/**
* _islower - check for lowercase letter
* @c : character to check the case
* Return: 0 or 1
*/

int _islower(int c)
{
return (c >= 97 && c <= 122);

}
3-puts.c/       0           0     0     644     290       `
#include "main.h"
/**
 * _puts - prints a string, followed by a new line.
 * @str: input string.
 * Return: no return.
 */
void _puts(char *str)
{
	int count = 0;

	while (count >= 0)
	{
		if (str[count] == '\0')
		{
			_putchar('\n');
			break;
		}
		_putchar(str[count]);
		count++;
	}
}
3-strcmp.c/     0           0     0     644     264       `
#include "main.h"

/**
 * _strcmp - compare two strings.
 *@s1: string 1.
 *@s2: string 2.
 *Return: int.
 */

int _strcmp(char *s1, char *s2)
{
int i = 0, cmp = 0;

while (s1[i] != '\0' && s2[i] != '\0' && cmp == 0)
{
cmp = s1[i] - s2[i];
i++;
}

return (cmp);
}
3-strspn.c/     0           0     0     644     502       `
#include "main.h"

/**
 * _strspn - gets the length of a prefix substring
 * @s: input string to search for substring
 * @accept: characters that prefix substring must include
 * Return: length of prefix substring
 */

unsigned int _strspn(char *s, char *accept)
{
unsigned int i, j, a_len = 0, len = 0;

while (accept[a_len] != '\0')
a_len++;
for (i = 0; s[i] != '\0'; i++)
for (j = 0; j < a_len; j++)
if (s[i] == accept[j])
len++, j = a_len;
else
if (j == a_len - 1)
goto exit;
exit: return (len);
}
4-isalpha.c/    0           0     0     644     192       `
#include "main.h"

/**
* _isalpha - check for alphabetic letter
* @c : character to check
* Return: 0 or 1
*/

int _isalpha(int c)
{
return ((c >= 97 && c <= 122) || (c >= 65 && c <= 90));

}
4-strpbrk.c/    0           0     0     644     414       `
#include "main.h"

/**
 * _strpbrk - finds first matching char in string
 * @s: input string to search for matching char
 * @accept: characters that could be matched
 * Return: pointer to matching char
 */

char *_strpbrk(char *s, char *accept)
{
unsigned int i, j;

for (i = 0; s[i] != '\0'; i++)
for (j = 0; accept[j] != '\0'; j++)
if (s[i] == accept[j])
goto exit;
exit: return (s[i] != '\0' ? s + i : '\0');
}
5-strstr.c/     0           0     0     644     511       `
#include "main.h"

/**
 * _strstr - returns pointer to first char of matching substring
 * @haystack: string to find substring in
 * @needle: substring to find match of
 * Return: pointer to first char of matching substring
 */

char *_strstr(char *haystack, char *needle)
{
int k;

while (*haystack != '\0')
{
k = 0;
while (*haystack == *needle && *haystack != '\0' && *needle != '\0')
haystack++, needle++, k++;
if (*needle == '\0')
return (haystack - k);
haystack -= (k - 1), needle -= k;
}
return ('\0');
}

6-abs.c/        0           0     0     644     145       `
#include "main.h"

/**
* _abs - return abs value
* @n : number to check
* Return: 0 or 1
*/

int _abs(int n)
{

return (n >= 0 ? n : n * -1);

}

9-strcpy.c/     0           0     0     644     432       `
#include "main.h"

#include <stdio.h>
/**
 * _strcpy - copies the string pointed to by src,
 * including the terminating null byte, to the
 * buffer pointed to by dest.
 * @dest: destination.
 * @src: source.
 * Return: the pointer to dest.
 */
char *_strcpy(char *dest, char *src)
{
	int count = 0;

	while (count >= 0)
	{
		*(dest + count) = *(src + count);
		if (*(src + count) == '\0')
			break;
		count++;
	}
	return (dest);
}
_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

